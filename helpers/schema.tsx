/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface CollectibleTypes {
  cost: number;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  emoji: string;
  id: Generated<number>;
  name: string;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: boolean;
}

export interface Reflections {
  createdAt: Generated<Timestamp | null>;
  emojiRating: number | null;
  id: Generated<number>;
  reflectionText: string | null;
  sentiment: string | null;
  taskId: number | null;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface Tasks {
  completed: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  estimatedMinutes: number | null;
  id: Generated<number>;
  title: string;
  userId: number;
}

export interface TaskSteps {
  completed: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  description: string;
  id: Generated<number>;
  materials: string | null;
  orderIndex: number;
  taskId: number | null;
}

export interface UserCollectibles {
  collectibleTypeId: number;
  id: Generated<number>;
  purchasedAt: Generated<Timestamp | null>;
  quantity: Generated<number | null>;
  userId: number;
}

export interface UserPasswords {
  passwordHash: string;
  userId: number;
}

export interface UserProgress {
  kaibloomsPoints: Generated<number | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
}

export interface UserSettings {
  biggerText: Generated<boolean | null>;
  breakReminderInterval: Generated<number | null>;
  breakRemindersEnabled: Generated<boolean | null>;
  celebrationNotificationsEnabled: Generated<boolean | null>;
  classes: string[] | null;
  dailyCheckinEnabled: Generated<boolean | null>;
  grade: string | null;
  hapticBuzz: Generated<boolean | null>;
  kaibeatPlaylistUrl: string | null;
  notificationsEnabled: Generated<boolean | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface DB {
  collectibleTypes: CollectibleTypes;
  loginAttempts: LoginAttempts;
  reflections: Reflections;
  sessions: Sessions;
  tasks: Tasks;
  taskSteps: TaskSteps;
  userCollectibles: UserCollectibles;
  userPasswords: UserPasswords;
  userProgress: UserProgress;
  users: Users;
  userSettings: UserSettings;
}




// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.